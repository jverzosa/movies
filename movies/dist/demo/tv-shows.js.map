{"version":3,"file":"tv-shows.js","sourceRoot":"","sources":["../../demo/tv-shows.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, css, html } from 'lit';\r\nimport { customElement, property, state } from 'lit/decorators.js';\r\n\r\nconst getTVShows = async (query: string) => {\r\n  let json = null;\r\n  const response = await fetch(`https://api.tvmaze.com/search/shows?q=${query}`);\r\n  json = await response.json();\r\n  await new Promise<void>((r) => setTimeout(() => r(), 1000));\r\n  return json;\r\n}\r\n\r\n@customElement('tv-shows')\r\nexport class TVShows extends LitElement {\r\n  static styles = css`\r\n    .searchBar {\r\n      margin: 20px 40%;\r\n      color: black;\r\n      font-size: 24px;\r\n      padding: 2px 10px 2px;\r\n      border: 3px solid lightgray;\r\n      text-align: center;\r\n    }\r\n    .showCard-container {\r\n      display: grid;\r\n      grid-template-columns: auto auto auto;\r\n      padding: 5px;\r\n    }\r\n    .showCard {\r\n      background-color: rgba(255, 255, 255, 0.8);\r\n      border: 1px solid rgba(0, 0, 0, 0.8);\r\n      margin: 5px;\r\n      heigth: 100px;\r\n    }\r\n    .image {\r\n      width: 20%;\r\n      float: left;\r\n      margin: 0px;\r\n    }\r\n    .info {\r\n      width: 75%;\r\n      float: right;\r\n      padding-left: 5px;\r\n    }\r\n    .title {\r\n      font-weight: bold;\r\n      font-size: 16px;\r\n    }\r\n    .rating {\r\n      font-size: 16px;\r\n    }\r\n    .desc {\r\n      text-overflow: ellipsis;\r\n      font-size: 9px;\r\n      overflow: hidden;\r\n      height: 20px;\r\n    }\r\n  `;\r\n\r\n  @property()\r\n  tvShows: Array<Object> = [];\r\n  tvShowsContainer: any;\r\n  finalHTML: any;\r\n\r\n  render() {\r\n    let searchBar = html`<input class=\"searchBar\" placeholder=\"Search TV Shows\" @input=${this.filterTvShows}></input>`;    \r\n    return html`${searchBar}${this.finalHTML}`;\r\n    \r\n  }\r\n\r\n  @property()\r\n  seachQuery?: string;\r\n  @state()\r\n  private content: Promise<Array<Object>> = getTVShows('');\r\n  filterTvShows(event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    this.seachQuery = input.value;\r\n    this.content = getTVShows(input.value);\r\n    this.content.then((results) => {\r\n      if (this.seachQuery && results && results.length > 0) {\r\n        results.map((item: any) => {\r\n          let tvShow = {\r\n            image: item.show.image ? item.show.image['medium'] : 'https://static.tvmaze.com/uploads/images/medium_portrait/60/152357.jpg',\r\n            name: item.show.name,\r\n            rating: item.show.rating && item.show.rating['average'] ? item.show.rating['average'] + '/10' : 'No Rating yet',\r\n            desc: item.show.summary,\r\n            index: item.show.id\r\n          }\r\n          this.tvShows.push(tvShow);\r\n        });\r\n      };\r\n      if (this.tvShows.length > 0) {\r\n        this.tvShowsContainer = html`<div class=\"showCard-container\">\r\n        ${this.tvShows.map((tvShow: any) =>\r\n          html`\r\n          <div class=\"showCard\">\r\n            <img class=\"image\" src=\"${tvShow.image}\">\r\n            <div class=\"info\">\r\n              <div class=\"title\" @click=\"this.selectTVshow\">${tvShow.name}</div>\r\n              <div class=\"rating\">${tvShow.rating}</div>\r\n              <div class=\"desc\">${tvShow.desc}</div>\r\n            </div>\r\n          </div>\r\n            `\r\n        )}</div>`;\r\n        this.finalHTML = html`${this.tvShowsContainer}`;\r\n      } else {\r\n        this.finalHTML = html`<p>Not Working Search</p>`;\r\n      }\r\n    });\r\n  }\r\n\r\n  selectTVshow(item: any) {\r\n    \r\n  }\r\n}\r\n"]}